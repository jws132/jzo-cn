---
nav:
  title: 组件
  path: /components
group:
  title: GForm
---

## 表单组件

### 普通表单

```jsx
/**
 * title: [描述]
 * thumbnail: [缩略图的 URL 地址]
 * desc:[表单类型支持：input,inputNumber,textArea,password,switch]
 **/

import React from 'react';
import { message, Button } from 'antd';
import { GForm } from '@jzo/a-cn';

export default ({}) => {
  const fromProps = {
    column: 1,
    fields: [
      {
        type: 'input',
        label: '真实姓名',
        name: 'username',
        required: true,
      },
      {
        type: 'input',
        label: '邮箱',
        name: 'mail',
        dependency: {
          disabled: {
            relates: ['username'],
            inputs: ['*'],
            output: false,
            defaultOutput: true,
          },
        },
      },
      {
        type: 'select',
        label: '状态',
        name: 'status',
        valueEnum: {
          1: '是',
          0: '否',
        },
      },
      {
        type: 'radiogroup',
        label: '是否隐藏',
        name: 'enable',
        valueEnum: {
          1: '是',
          0: '否',
        },
        props: {
          optionType: 'button',
        },
      },
      {
        type: 'textarea',
        label: '不显示',
        name: 'notshow',
        dependency: {
          visible: {
            relates: ['enable', 'username'],
            inputs: [[1], '*'],
            output: true,
          },
        },
      },
    ],
    initialValues: {
      enable: 1,
      status: 0,
    },
  };

  return <GForm {...fromProps} />;
};
```

### 表单排版

```jsx
import React, { useState } from 'react';
import { message, Button, Row, Col } from 'antd';
import { JForm, Select } from '@jzo/a-cn';

export default ({}) => {
  const [layout, setLayout] = useState('horizontal');
  const [cols, setCols] = useState(1);

  const fromProps = {
    layout,
    itemLayout: {
      span: 24 / cols,
    },
    fields: [
      {
        type: 'input',
        label: '真实姓名',
        name: 'username',
        required: true,
      },
      {
        type: 'input',
        label: '邮箱',
        name: 'mail',
        dependency: {
          disabled: {
            relates: ['username'],
            inputs: ['*'],
            output: false,
            defaultOutput: true,
          },
        },
      },
      {
        type: 'select',
        label: '状态',
        name: 'status',
        valueEnum: {
          1: '是',
          0: '否',
        },
      },
      {
        type: 'radioGroup',
        label: '是否隐藏',
        name: 'enable',
        valueEnum: {
          1: '是',
          0: '否',
        },
        props: {
          optionType: 'button',
        },
      },
      {
        type: 'textArea',
        label: '不显示',
        name: 'notshow',
        dependency: {
          visible: {
            relates: ['enable', 'username'],
            inputs: [[1], '*'],
            output: true,
          },
        },
      },
    ],

    onFinish: values => {
      console.log('values', values);
    },
  };

  const valueChange = e => {
    setLayout(e);
  };

  const colsChange = e => {
    setCols(e);
  };

  return (
    <>
      <Row>
        <Col span={6}>
          <Select
            onChange={valueChange}
            optionsData={[
              { label: '水平(默认)', value: 'horizontal' },
              { label: '垂直', value: 'vertical' },
              { label: '内联', value: 'inline' },
            ]}
          />
        </Col>
        <Col span={6}>
          <Select
            onChange={colsChange}
            optionsData={[
              { label: '单列', value: 1 },
              { label: '双列', value: 2 },
              { label: '三列', value: 3 },
            ]}
          />
        </Col>
      </Row>
      <JForm {...fromProps} />
    </>
  );
};
```

### 分组表单

```jsx
/**
 * [配置项名称]: [值]
 */
import React from 'react';
import { message, Button } from 'antd';
import { JForm } from '@jzo/a-cn';

export default ({}) => {
  const fromProps = {
    itemLayout: {
      cols: 1,
    },

    fields: [
      {
        type: 'input',
        label: '用户名',
        name: 'type',
      },
      {
        type: 'input',
        label: '手机号',
        name: 'phone',
      },
      {
        type: 'input',
        label: '地址',
        name: 'address',
      },
      {
        container: {
          props: {
            title: '家庭住址',
          },
        },
        fields: [
          {
            type: 'input',
            label: '家庭地址',
            name: 'homeAddress',
          },
          {
            type: 'input',
            label: '家庭座机',
            name: 'homeTel',
          },
        ],
      },
      {
        container: {
          props: {
            title: '企业信息',
            style: {
              marginTop: 30,
              marginBottom: 30,
            },
          },
        },
        fields: [
          {
            type: 'input',
            label: '营业执照',
            name: 'idCard',
          },
          {
            type: 'input',
            label: '企业地址',
            name: 'entAddress',
          },
        ],
      },
    ],
    initialValues: {
      enable: 1,
      status: 0,
    },
    layout: 'horizontal', //horizontal | vertical | inline
    onFinish: values => {
      console.log('values', values);
    },
  };
  return <JForm {...fromProps} />;
};
```

### disabled 关联

```jsx
/**
 * [配置项名称]: [值]
 */
import React from 'react';
import { message, Button } from 'antd';
import { JForm } from '@jzo/a-cn';

export default ({}) => {
  const fromProps = {
    itemLayout: {
      cols: 1,
    },
    fields: [
      {
        type: 'input',
        label: '类型',
        name: 'type',
        required: true,
        props: {
          placeholder: '请输入“女”',
        },
      },
      {
        type: 'input',
        label: '性别',
        name: 'context',
        dependency: {
          disabled: {
            relates: ['type'],
            inputs: [['女']],
            output: false,
            defaultOutput: true,
          },
        },
      },
    ],
    initialValues: {
      enable: 1,
      status: 0,
    },
    layout: 'horizontal', //horizontal | vertical | inline
    onFinish: values => {
      console.log('values', values);
    },
  };
  return <JForm {...fromProps} />;
};
```

### visible 关联

```jsx
/**
 * [配置项名称]: [值]
 */
import React from 'react';
import { message, Button } from 'antd';
import { JForm } from '@jzo/a-cn';

export default ({}) => {
  const fromProps = {
    itemLayout: {
      cols: 1,
    },
    fields: [
      {
        type: 'input',
        label: '热搜',
        name: 'hot',
        props: {
          placeholder: '请输入“小白龙”',
        },
        required: true,
      },
      {
        type: 'input',
        label: '内容',
        name: 'context',
        required: true,
        dependency: {
          visible: {
            relates: ['hot'],
            inputs: [['小白龙']],
            output: true,
          },
        },
      },
    ],
    initialValues: {
      enable: 1,
      status: 0,
    },
    layout: 'horizontal', //horizontal | vertical | inline
    onFinish: values => {
      console.log('values', values);
    },
  };
  return <JForm {...fromProps} />;
};
```

### Api

| 属性名              | 说明                                                      | 类型                                                | 默认                       |
| ------------------- | --------------------------------------------------------- | --------------------------------------------------- | -------------------------- |
| onFinish            | 提交表单且数据验证成功后回调事件，同 antd 4 Form 组件 API | (values)=>Promise<void>                             | -                          |
| modelKeys           | 字段索引值转化                                            | Array                                               | ['children','title','key'] |
| defaultSelectedKeys | 默认选中的树节点                                          | string[]                                            | []                         |
| hideSearch          | 是否显示搜索                                              | bool                                                | false                      |
| onSelect            | 点击树节点触发                                            | (keys,node)=>{}                                     | -                          |
| toolBarRender       | 渲染工具栏                                                | ({checkedKeys,clearCheckedKeys,allCheckedKeys})=>{} | null                       |
| placeholder         | 搜索框 hideSearch = true 使用                             | string                                              | 请输入查询条件             |
| iconRender          | 显示 icon                                                 | ({type,selected}=>{})                               | null                       |
| menuRightRender     | 菜单显示                                                  | (key,item)=>{}                                      | []                         |

More skills for writing demo: https://d.umijs.org/guide/demo-principle
